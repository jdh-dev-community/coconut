name: community-build-dev

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches:
      - community_service/cicd

jobs:
  build:
    environment: dev
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    services:
      redis:
        image: redis
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create application.yml
        run: |
          echo -e "${{ secrets.APPLICATION_YML }}" > ./community_service/src/main/resources/application.yml

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew :community_service:build --no-daemon

      - name: Log into registry
        run: docker login ${{ secrets.DOCKER_HUB_REGISTRY }} -u ${{ secrets.DOCKER_HUB_ID }} -p ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: docker build
        run: docker build -t ${{ secrets.DOCKER_HUB_ID }}/${{ secrets.DOCKER_HUB_REPO }}:latest -f ./community_service/Dockerfile ./

      - name: docker push
        run: docker push ${{ secrets.DOCKER_HUB_ID }}/${{ secrets.DOCKER_HUB_REPO }}:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Test SSH Connection
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
        run: |
          echo "$SSH_KEY" > ec2-key.pem
          chmod 400 ec2-key.pem

          ssh -i "ec2-key.pem" -o StrictHostKeyChecking=no ${{secrets.EC2_USER}}@${{secrets.EC2_HOST}} << EOF
          echo "hello world"
          EOF


      - name: Execute SSH Command
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
        run: |
          echo "$SSH_KEY" > ec2-key.pem
          chmod 400 ec2-key.pem

          ssh -i "ec2-key.pem" -o StrictHostKeyChecking=no ${{secrets.EC2_USER}}@${{secrets.EC2_HOST}} << EOF
          sudo docker login docker.io -u ${{secrets.DOCKER_HUB_ID}} -p ${{secrets.DOCKER_HUB_TOKEN}}
          sudo docker stop app
          sudo docker rm app
          sudo docker rmi  ${{ secrets.DOCKER_HUB_ID }}/${{ secrets.DOCKER_HUB_REPO }}

          sudo docker pull  ${{ secrets.DOCKER_HUB_ID }}/${{ secrets.DOCKER_HUB_REPO }}
          sudo docker run -d -p 80:8080 -e SPRING_PROFILES_ACTIVE=dev --name app  ${{ secrets.DOCKER_HUB_ID }}/${{ secrets.DOCKER_HUB_REPO }}

          EOF

          rm -f ec2-key.pem
          
          
